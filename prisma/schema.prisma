// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {  
  nik                 String  @id @default(uuid()) @db.VarChar(16)
  email               String  @unique @db.VarChar(64)
  nama                String  @db.VarChar(100)
  alamat              String 
  password            String  @db.VarChar(100)
  token               String? @db.VarChar(100)
  role                String  @default("user") @db.VarChar(20)
  tanggal_lahir       DateTime?
  foto                String? 
  fcm_token           String? 
  
  laporans            Laporan[]
  threads             Thread[]
  replies             Reply[]
  user_favorite_ahli  UserFavoriteAhli[]
  ulasan_ahli         UlasanAhli[]
  vote_sengketa       VoteSengketa[]
  komentar_sengketa   KomentarSengketa[]

  @@map("users")
}

model Laporan {
  no_sertifikat  String  @db.VarChar(150)
  user_nik       String  @db.VarChar(16)
  deskripsi      String
  proses_laporan String  @db.VarChar(10)
  latitude       Float
  longitude      Float
  tanggal_lapor  DateTime @default(now())
  vote           Int      @default(0)
  id             String   @unique @db.VarChar(6)

  user           User    @relation(fields: [user_nik], references: [nik], onDelete: Cascade)
  
  fotos             FotoLaporan[]
  foto_dokumen      FotoDokumenPendukung[]
  vote_sengketa     VoteSengketa[]
  komentar_sengketa KomentarSengketa[]

  @@id([no_sertifikat, user_nik])
  @@map("laporans")
}

model FotoLaporan {
  url           String
  no_sertifikat String
  user_nik      String

  laporan       Laporan @relation(fields: [no_sertifikat, user_nik], references: [no_sertifikat, user_nik], onDelete: Cascade)
  
  @@id([url, no_sertifikat, user_nik])
  @@map("foto_laporan")
}

model FotoDokumenPendukung {
  url           String
  no_sertifikat String
  user_nik      String

  laporan       Laporan @relation(fields: [no_sertifikat, user_nik], references: [no_sertifikat, user_nik], onDelete: Cascade)
  
  @@id([url, no_sertifikat, user_nik])
  @@map("foto_dokumen_pendukung")
}

model Thread {
  id              String    @id @default(uuid())
  judul           String    @db.VarChar(150)
  user_nik        String    @db.VarChar(16)
  isi             String    
  tanggal_upload  DateTime  @default(now())
  
  replies         Reply[] 
  user            User      @relation(fields: [user_nik], references: [nik], onDelete: Cascade)

  @@map("threads")
}

model Reply {
  id               String    @id @default(uuid())
  isi              String    @db.VarChar(255)
  user_nik         String    @db.VarChar(16)
  thread_id        String
  parent_id        String?    
  tanggal_upload   DateTime  @default(now())

  user             User      @relation(fields: [user_nik], references: [nik], onDelete: Cascade)
  thread           Thread    @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  reply            Reply?    @relation("ReplyToReply", fields: [parent_id], references: [id], onDelete: Cascade)
  replies          Reply[]   @relation("ReplyToReply")

  @@map("replies")
}


model PostEdukasi {
  id              String    @id @default(uuid())
  judul           String    @db.VarChar(150)
  deskripsi       String    @db.VarChar(255)
  isi             String
  publisher       String    @db.VarChar(50)
  tanggal_upload  DateTime  @default(now())
  sumber          String 
  is_recommended  Boolean   @default(false)

  fotos           FotoArtikel[]

  @@map("post_edukasi")
}

model FotoArtikel {
  url           String
  id_artikel    String

  post_edukasi  PostEdukasi @relation(fields: [id_artikel], references: [id], onDelete: Cascade)
  
  @@id([url, id_artikel])
  @@map("foto_artikel")
}

model UlasanAhli {
  ahli_id     String
  rating      Float
  isi         String @db.VarChar(255)
  user_nik    String @db.VarChar(100)
  ahli        Ahli   @relation(fields: [ahli_id], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [user_nik], references: [nik], onDelete: Cascade)

  @@id([ahli_id, user_nik])
  @@map("ulasan_ahli")
}

model Ahli {
  id                 String    @id @default(uuid())
  nama               String    @db.VarChar(100)
  bidang             String    @db.VarChar(50)
  nomor_wa           String    @db.VarChar(20)
  deskripsi          String    @db.VarChar(255)
  lama_kerja         Float
  foto               String?

  ulasan             UlasanAhli[]
  user_favorite_ahli UserFavoriteAhli[]
  
  @@map("ahli")
}

model UserFavoriteAhli {
  email_user    String  @db.VarChar(64)
  id_ahli       String
  
  user          User    @relation(fields: [email_user], references: [email], onDelete: Cascade)
  ahli          Ahli   @relation(fields: [id_ahli], references: [id], onDelete: Cascade)

  @@id([email_user, id_ahli])
  @@map("user_favorite_ahli")
}

model VoteSengketa {
  no_sertifikat  String
  user_nik       String
  user_voter_nik String

  user          User    @relation(fields: [user_voter_nik], references: [nik], onDelete: Cascade)
  laporan       Laporan @relation(fields: [no_sertifikat, user_nik], references: [no_sertifikat, user_nik], onDelete: Cascade)
  
  @@id([no_sertifikat, user_nik, user_voter_nik])
  @@map("vote_sengketa")
}

model KomentarSengketa {
  no_sertifikat      String
  user_nik           String
  user_commenter_nik String
  id                 String @id @default(uuid())
  comment            String
  tanggal_upload     DateTime  @default(now())

  user          User    @relation(fields: [user_commenter_nik], references: [nik], onDelete: Cascade)
  laporan       Laporan @relation(fields: [no_sertifikat, user_nik], references: [no_sertifikat, user_nik], onDelete: Cascade) 

  @@map("komentar_sengketa")  
}

model FileContext {
  url        String
  uu_name    String
  id         String @id @default(uuid())
  is_inserted Boolean @default(false)

  @@map("file_context")
}